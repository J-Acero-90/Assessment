"""
This script runs the API application using a development server.
"""

from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel, Field
import re
from typing import List, Optional

app = FastAPI()

db = {}  # In-memory database (dictionary for simplicity)

class Vulnerability(BaseModel):
    title: str = Field(..., max_length=30)
    cve: str = Field(..., pattern=r"^CVE-\d{4}-\d{4,7}$")
    criticality: int = Field(..., ge=0, le=10)
    description: str = Field(..., max_length=100)

@app.get("/vulnerability/{cve}")
def get_vulnerability(cve: str):
    if not re.match(r"^CVE-\d{4}-\d{4,7}$", cve):
        raise HTTPException(status_code=400, detail="Invalid CVE format")
    
    vulnerability = db.get(cve)
    if not vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return vulnerability

@app.get("/vulnerability")
def list_vulnerabilities(
    title: Optional[str] = None,
    min_criticality: Optional[int] = Query(None, ge=0, le=10),
    max_criticality: Optional[int] = Query(None, ge=0, le=10)
):
    result = list(db.values())
    
    if title:
        result = [v for v in result if title.lower() in v['title'].lower()]
    
    if min_criticality is not None:
        result = [v for v in result if v['criticality'] >= min_criticality]
    
    if max_criticality is not None:
        result = [v for v in result if v['criticality'] <= max_criticality]
    
    if not result:
        raise HTTPException(status_code=404, detail="No vulnerabilities found")
    
    return result

@app.post("/vulnerability")
def create_vulnerability(vuln: Vulnerability):
    if vuln.cve in db:
        raise HTTPException(status_code=400, detail="CVE already exists")
    
    db[vuln.cve] = vuln.dict()
    return vuln

@app.delete("/vulnerability/{cve}")
def delete_vulnerability(cve: str):
    if not re.match(r"^CVE-\d{4}-\d{4,7}$", cve):
        raise HTTPException(status_code=400, detail="Invalid CVE format")
    
    vulnerability = db.pop(cve, None)
    if not vulnerability:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return vulnerability
